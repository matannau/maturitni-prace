import unittest

from src.bot import find_best_move_value, need_to_block


class TestValue(unittest.TestCase):

    def test_3_cross(self):
        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1.75)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["O"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1.75)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["X"], ["O"], ["_"], ["O"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1.75)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["O"], ["X"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 3)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["X"], ["X"], ["O"], ["_"], ["O"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["O"], ["O"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["O"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 3)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["O"], ["X"], ["X"], ["O"], ["X"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1.75)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["O"], ["O"], ["O"], ["O"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["X"], ["X"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["O"], ["O"], ["O"], ["O"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 3)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"]],
            [["_"], ["O"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["O"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 3)

    def test_4_cross(self):
        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["X"], ["X"], ["X"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["X"], ["X"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["X"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["O"], ["X"], ["O"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1)

    def test_forks_cross(self):
        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1.75)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["O"], ["O"], ["O"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["X"], ["X"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["O"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1.75)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["X"], ["X"], ["O"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 3)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["X"], ["_"], ["O"], ["X"], ["O"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["X"], ["O"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1.75)

    def test_winning_move_cross(self):
        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"]],
            [["_"], ["X"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["O"], ["O"], ["O"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["X"], ["X"], ["X"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["O"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["X"], ["_"], ["X"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        value, moves = find_best_move_value(gamegrid, size, "O", "X")
        self.assertEqual(value, 1)


class TestNeedToBlock(unittest.TestCase):
    def test_block_needed_true(self):
        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertTrue(need)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["X"], ["_"], ["X"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertTrue(need)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["O"], ["O"], ["O"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["X"], ["X"], ["X"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["O"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertTrue(need)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"]],
            [["_"], ["X"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertTrue(need)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["O"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertTrue(need)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["X"], ["_"], ["O"], ["X"], ["O"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["X"], ["O"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertTrue(need)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["X"], ["X"], ["X"], ["X"], ["O"], ["X"], ["O"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["X"], ["O"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertTrue(need)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"]],
            [["_"], ["X"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["O"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertTrue(need)

    def test_block_needed_false(self):
        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["X"], ["X"], ["X"], ["O"], ["X"], ["O"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["X"], ["O"], ["O"], ["O"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["O"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertFalse(need)

        gamegrid, size = [
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["X"], ["_"], ["_"], ["_"]],
            [["_"], ["O"], ["_"], ["_"], ["X"], ["X"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["O"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]],
            [["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"], ["_"]]
        ], 10
        need = need_to_block(gamegrid, size, "O", "X", 3)[0]
        self.assertFalse(need)
